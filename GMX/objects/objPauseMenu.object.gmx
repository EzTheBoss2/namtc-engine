<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000010</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>selected = 1;  // Main panel
selected2 = 0; // Side panel

inPanel = false; // Are we messing with the panel options?

control_labels =  ds_list_create()
control_letters = ds_list_create()

ds_list_add(control_labels,
    "Left",
    "Right",
    "Jump",
    "Shoot",
    "Restart",
    "Skip",
    "Suicide",
    "Menu",
    "Open Door"
)

ds_list_add(control_letters,
    chr(global.leftButton[0]),
    chr(global.rightButton[0]),
    chr(global.jumpButton[0]),
    chr(global.shootButton[0]),
    chr(global.restartButton[0]),
    chr(global.skipButton[0]),
    chr(global.suicideButton[0]),
    chr(global.pauseButton[0])
)

// ----- Copy-paste from obptions menu -----

xSelector = 254;
ySelector = 132;
xSeperation = 550+240;
ySeperation = 48;

optionsNum = 6; //sets number of separate options available

/*
if (!global.controllerEnabled)  //remove controller settings menu if controllers are disabled
{
    optionsNum -= 1;
    ySelector += 32;
}
*/
// Nobody actually uses controller support, and it's easier to not support it
// If you want to go back and add it, be my guest

strSelect[0] = "Music";
strSelect[1] = "Volume Level";
strSelect[2] = "Screen Mode";
strSelect[3] = "Smoothing Mode";
strSelect[4] = "Vsync";
strSelect[5] = "Screen Location"; // Left / Centered / Right

playerIndex = 0;

mouse_x_real = 0;
changingKeybind = false; // for control menu
keybindNum = 0;

changingStat = false;  // for debug menu
statNum = -1;
keyArea = 0; keyType = 0; // Both for key changing
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Handle all menu input

if selected == 6 &amp;&amp; inPanel { // Handle special options for debug menu
// This needs to be put in front of the rest of the code becuase otherwise you go into the submenu immediately
    if scrButtonCheckPressed(global.jumpButton) &amp;&amp; !changingStat {
        show_debug_message("h")
        audio_play_sound(sndJump, 0, false)
        if selected2 &lt; 4 {
            changingStat = true;
            statNum = selected2;
        } else {
            if selected2 == 4 {
                for (i = 0; i &lt;= 256; i++) {
                    global.saveRoomObject[room, i] = false; // Set all objects in current room to untouched
                }
            } else if selected2 == 5 {
                global.noDeath = !global.noDeath
            } else if selected2 == 6 {
                global.infJump = !global.infJump
            }
        }
    }
    
    if changingStat {
        for (i = ord('0'); i &lt;= ord('9') ; i++) { // ord('0') through ord('9')
            if keyboard_check_pressed(i) {
                var num = i - ord('0')
                switch statNum {
                    case 0:         // HP
                        global.kidHP = floor((10 * global.kidHP) + num) // Add number to the end
                    break; case 1:  // ATK
                        global.kidATK = floor((10 * global.kidATK) + num)
                    break; case 2:  // DEF
                        global.kidDEF = floor((10 * global.kidDEF) + num)
                    break; case 3:  // Keys
                        global.kidKey[keyArea, keyType] = floor((10 * global.kidKey[keyArea, keyType]) + num)
                    break;
                }
            }
        }
        
        if keyboard_check_pressed(vk_delete) || keyboard_check_pressed(vk_backspace) { // Delete a number if delete or bcksp pressed
            switch statNum {        // Flooring means that we don't need to care about the last number
                case 0:         // HP
                    global.kidHP = floor(global.kidHP/10)
                break; case 1:  // ATK
                    global.kidATK = floor(global.kidATK/10)
                break; case 2:  // DEF
                    global.kidDEF = floor(global.kidDEF/10)
                break; case 3:  // Keys
                    global.kidKey[keyArea, keyType] = floor(global.kidKey[keyArea, keyType]/10)
                break;
            }
        }
        
        if statNum == 3 { // Additional buttons
            if scrButtonCheckPressed(global.suicideButton) {
                keyArea--
                if keyArea &lt; 0 { keyArea = 0 }
            } else if scrButtonCheckPressed(global.restartButton) {
                keyArea++
            }
            
            if scrButtonCheckPressed(global.openDoorButton) {
                keyType++
                if keyType &gt; 9 { keyType = 9 }
            } else if scrButtonCheckPressed(global.skipButton) {
                keyType--
                if keyType &lt; 0 { keyType = 0 }
            }
        }
    }
}



if !inPanel &amp;&amp; !changingKeybind {
    if scrButtonCheckPressed(global.downButton) {
        selected++
        selected2 = 0
        if selected &gt;= 7 {
            selected = 0;
        }
        audio_play_sound(sndJump, 0, false)
    } else if scrButtonCheckPressed(global.upButton) {
        selected--
        selected2 = 0
        if selected &lt; 0 {
            selected = 6;
        }
        audio_play_sound(sndJump, 0, false)
    }
} else {
    if selected != 5 &amp;&amp; selected != 6 {
        if scrButtonCheckPressed(global.rightButton) {
            selected2++
            audio_play_sound(sndJump, 0, false)
        } else if scrButtonCheckPressed(global.leftButton) {
            selected2--
            audio_play_sound(sndJump, 0, false)
        }
    } else {
        if scrButtonCheckPressed(global.downButton) &amp;&amp; !changingStat {
            selected2++
            audio_play_sound(sndJump, 0, false)
        } else if scrButtonCheckPressed(global.upButton) &amp;&amp; !changingStat {
            selected2--
            audio_play_sound(sndJump, 0, false)
        }
    }
    switch selected {
        case 1:
            if selected2 &gt; floor(instance_number(objEnemy))/14 {
                selected2 = floor(instance_number(objEnemy)/14)
            }
            if selected2 &lt; 0 {
                selected2 = 0
            }
            
        break;
        case 5:
            if selected2 &gt;= optionsNum {
                selected2 = optionsNum-1
            }
            if selected2 &lt; 0 {
                selected2 = 0
            }
        break;
        case 6:
            if selected2 &gt; 6 {
                selected2 = 6;
            }
            if selected2 &lt; 0 {
                selected2 = 0;
            }
        break;
        default:
            if selected2 != 0 { selected2 = 0 }
        break;
    }
}

if scrButtonCheckPressed(global.jumpButton) &amp;&amp; selected != 0 &amp;&amp; selected != 3 { // No options for Basics, controls are mouse powered
    inPanel = true;
} else if scrButtonCheckPressed(global.shootButton) { 
    if changingStat {           // We need to go down submenus properly
        changingStat = false;
        statNum = -1;
    } else {
        inPanel = false;
    } 
}

if selected == 3 {   // special control handling for controls menu
    if mouse_check_button_pressed(mb_left) &amp;&amp; !changingKeybind {
        show_debug_message("Clicked at position " + string(mouse_x_real) + ", " + string(mouse_y))
        for (i = 0; i &lt;= 3; i++) {
            for (j = 0; j &lt;= 2; j++) {
                if  mouse_x_real    &gt; (200*i)+248+25 &amp;&amp;     // Are we clicking an option?
                    mouse_x_real    &lt; (200*i)+248+175 &amp;&amp;
                    mouse_y         &gt; (100*j)+128 &amp;&amp;
                    mouse_y         &lt; (100*j)+128+50
                {
                    if ((j*4)+i) &lt; ds_list_size(control_letters) { // Are we clicking on invalid options?
                        changingKeybind = true; // We are clicking, which one?
                        keybindNum = (j * 4)+i
                    }
                }
            }
        }
    }
    
    if changingKeybind {
        if keyboard_check_pressed(vk_anykey) {
            new_key = keyboard_key;
        if (new_key == 160 || new_key == 161)   //check if current key pressed is either shift key
            new_key = 16; //set it to work for both shift keys
        
        switch keybindNum { // Update keybind
            case 0: global.leftButton[0]    = keyboard_key; break;
            case 1: global.rightButton[0]   = keyboard_key; break;
            case 2: global.jumpButton[0]    = keyboard_key; break;
            case 3: global.shootButton[0]   = keyboard_key; break;
            case 4: global.restartButton[0] = keyboard_key; break;
            case 5: global.skipButton[0]    = keyboard_key; break;
            case 6: global.suicideButton[0] = keyboard_key; break;
            case 7: global.pauseButton[0]   = keyboard_key; break;
            case 8: global.openDoorButton[0]= keyboard_key; break;
        }
        
        changingKeybind = false;
        }
    }
}

if selected == 5 &amp;&amp; inPanel {   // special control handling for options menu
    if selected2 == 1{
        if scrButtonCheck(global.leftButton) {
            global.volumeLevel--
            if global.volumeLevel &lt; 0 { global.volumeLevel = 0 }
        } else if scrButtonCheck(global.rightButton) {
            global.volumeLevel++
            if global.volumeLevel &gt; 100 { global.volumeLevel = 100 }
        }
    }
    
    if scrButtonCheckPressed(global.leftButton) {
        audio_play_sound(sndJump, 0, false)
        switch selected2 {
            case 0:
                global.muteMusic = !global.muteMusic
            break; case 2:
                global.fullscreenMode = !global.fullscreenMode
            break; case 3:
                global.smoothingMode = !global.smoothingMode
            break; case 4:
                global.vsyncMode = !global.vsyncMode
            break; case 5:
                global.screenPosition++
                if global.screenPosition &gt; 2 {
                    global.screenPosition = 2
                }
            break;
        }
    } else if scrButtonCheckPressed(global.rightButton) {
        audio_play_sound(sndJump, 0, false)
        switch selected2 {
            case 0:
                global.muteMusic = !global.muteMusic
            break; case 2:
                global.fullscreenMode = !global.fullscreenMode
            break; case 3:
                global.smoothingMode = !global.smoothingMode
            break; case 4:
                global.vsyncMode = !global.vsyncMode
            break; case 5:
                global.screenPosition--
                if global.screenPosition &lt; 0 {
                    global.screenPosition = 0;
                }
            break;
        }
    }
}




// Update mouse position because Game Maker jank
mouse_x_real = (1088/800) * mouse_x
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw back panels and side panel
var blue =      $FF694F // actually 4F69FF, it's backward for GM for some reason
var dark_blue = $682B20 // actually 202B68

draw_set_alpha(0.8); // Make menu slightly translucent

// Draw backing rectangles for the UI
draw_rectangle_colour(8,   8,   208,  281, blue, blue, dark_blue, dark_blue, false)
draw_rectangle_colour(216, 8,   1080, 56,  blue, blue, dark_blue, dark_blue, false)
draw_rectangle_colour(216, 64,  1080, 600, blue, blue, dark_blue, dark_blue, false)
draw_rectangle_colour(8,   493, 208,  600, blue, blue, dark_blue, dark_blue, false)


draw_rectangle_colour(8,   8,   208,  281, c_black, c_black, c_black, c_black, true)
draw_rectangle_colour(216, 8,   1080, 56,  c_black, c_black, c_black, c_black, true)
draw_rectangle_colour(216, 64,  1080, 600, c_black, c_black, c_black, c_black, true)
draw_rectangle_colour(8,   493, 208,  600, c_black, c_black, c_black, c_black, true)

draw_set_alpha(1); // Everything else should be solid

// Set up for text
draw_set_halign(0)
draw_set_colour(c_black)
draw_set_font(fDefault18)

scrDrawTextOutline(24,   32, "Basics", c_white, c_black)
scrDrawTextOutline(24, 2*32, "Monsters", c_white, c_black)
scrDrawTextOutline(24, 3*32, "Items", c_white, c_black)
scrDrawTextOutline(24, 4*32, "Controls", c_white, c_black)
scrDrawTextOutline(24, 5*32, "Achievements", c_white, c_black)
scrDrawTextOutline(24, 6*32, "Options", c_white, c_black)
scrDrawTextOutline(24, 7*32, "[DEBUG]", c_red, c_black)


scrDrawTextOutline(24, 520-2, global.death, c_white, c_black)

// Block to build time string

var tstring = ""
var t = floor(global.time);

tstring += string(t div 3600) + ":";
t = t mod 3600;
tstring += string(t div 600);
t = t mod 600;
tstring += string(t div 60) + ":";
t = t mod 60;
tstring += string(t div 10);
t = t mod 10;
tstring += string(t);


scrDrawTextOutline(24, 570-2, tstring, c_white, c_black)

draw_set_font(fDefault12) // Smaller header font for deathtime
scrDrawTextOutline(24, 500, "Deaths", c_white, c_black)
scrDrawTextOutline(24, 550, "Time", c_white, c_black)

draw_set_colour(c_white)

draw_sprite(sprHUDSelectorArrow, 0, 8, (selected+1)*32)


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw stats if in panel 0 ( Basics )
if selected == 0 {
    // Draw area, floor, and (optional) floor name
    draw_set_font(fDefault24)
    scrDrawTextOutline(224, 72, "Area " + string(global.currentArea) + ", Floor " + string(global.currentFloor), c_white, c_black)
    
    draw_set_font(fDefault12)
    scrDrawTextOutline(224, 108, global.floorName, c_white, c_black)
    
    // Big Kid sprite, mirroring original NAMTG
    draw_sprite_ext(sprPlayerIdle, 0, 900, 208, -10, 10, 0, c_white, 1)
    
    // HP, ATK, DEF
    draw_sprite(sprHUDHeart_Placeholder, 0, 750, 100)
    draw_sprite(sprATKPickup_Placeholder, 0, 750, 132)
    draw_sprite(sprDEFPickup_Placeholder, 0, 750, 164)
    
    draw_set_halign(2) // right align
    
    draw_set_font(fDefault24)
    scrDrawTextOutline(742,  97, global.kidHP, c_white, c_black)
    scrDrawTextOutline(742, 129, global.kidATK, c_white, c_black)
    scrDrawTextOutline(742, 161, global.kidDEF, c_white, c_black)
    
    
    scrDrawKeys(224+32, 332, 0)
    
    draw_rectangle_colour(500, 336, 1070, 590, c_black, c_black, c_black, c_black, false)
    scrDrawTextOutline(550, 386, "More content to be added#once finalised", c_white, c_black)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw monsters if in panel 1
if selected == 1 {
    objectList = ds_list_create()
    var monsteroffset = selected2*14;
    for (j = 0; j &lt;= 1; j++) { // Two loops, one for each column
        for (i = monsteroffset+(7*j); i &lt; min(monsteroffset+7+(7*j), instance_number(objEnemy)); i++) { // This won't be executed if there's not enough monsters
                                                                                                        // (hopefully)
            // Draw outline rectangle for each enemy
            draw_rectangle_colour(224+(427*j), 72 + (70 * (i - monsteroffset -(7*j))), 645+(427*j), 136 + (70 * (i - monsteroffset -(7*j))), c_black, c_black, c_black, c_black, true)
            draw_set_halign(0) // Fix align
            draw_set_font(fDefault12) // Draw enemy name in smaller font
            
            scrDrawTextOutline(224+4+(427*j), 72+4 + (70 * (i - monsteroffset -(7*j))), instance_find(objEnemy, i).name, c_white, c_black)
            
            // Draw the icons
            draw_sprite(sprHUDHeart_Placeholder, 0, 224+4+(427*j), 99+(70*(i - monsteroffset -(7*j))))
            draw_sprite(sprATKPickup_Placeholder, 0, 224+123+(427*j), 99+(70*(i - monsteroffset -(7*j))))
            draw_sprite(sprDEFPickup_Placeholder, 0, 224+246+(427*j), 99+(70*(i - monsteroffset -(7*j))))
            // Draw enemy stats in larger font
            draw_set_font(fDefault24)
            scrDrawTextOutline(224+38+(427*j), 96 + (70 * (i - monsteroffset -(7*j))), instance_find(objEnemy, i).hp, c_white, c_black)
            scrDrawTextOutline(224+123+38+(427*j), 96 + (70 * (i - monsteroffset -(7*j))), instance_find(objEnemy, i).atk, c_white, c_black)
            scrDrawTextOutline(224+246+38+(427*j), 96 + (70 * (i - monsteroffset -(7*j))), instance_find(objEnemy, i).def, c_white, c_black)
            
            var dmgtaken = instance_find(objEnemy, i).atk - global.kidDEF
            var dmgtaken2 = global.kidATK - instance_find(objEnemy, i).def
            
            // Find colour and draw text
            draw_set_font(fDefault12)
            draw_set_halign(2)
            
            // Draw black circle behind coloured circle for contrast
            draw_circle_colour(618+(427*j), 113+(70*(i - monsteroffset -(7*j))), 18, c_black, c_black, false)
            
            // Draw coloured circle
            if dmgtaken &gt; 0 { // We can damage the Kid; do we initiate a fight?
                if dmgtaken2 &gt; 0 { // Both can damage each other
                    draw_set_colour(c_yellow)
                    scrDrawTextOutline(645+(427*j), 74 + (70 * (i - monsteroffset -(7*j))), "Battle!", c_yellow, c_black)
                } else { // Enemy can kill Kid directly
                    draw_set_colour(c_red)
                    scrDrawTextOutline(645+(427*j), 74 + (70 * (i - monsteroffset -(7*j))), "Invincible!", c_red, c_black)
                }
            } else {
                if dmgtaken2 &gt; 0 { // Kid kills enemy without a fight
                    draw_set_colour(c_green)
                    scrDrawTextOutline(645+(427*j), 74 + (70 * i), "Safe!", c_green, c_black)
                } else {
                    draw_set_colour(c_gray)
                    scrDrawTextOutline(645+(427*j), 74 + (70 * i), "Stalemate...", c_gray, c_black)
                }
            }
            draw_circle(618+(427*j), 113+(70*(i - monsteroffset -(7*j))), 16, false)
        }
    }
    
    // Draw the page number in the top portion of the HUD
    draw_set_halign(0) // Fix align
    draw_set_font(fDefault24)
    scrDrawTextOutline(216+8, 12, "Page " + string(selected2+1) + "/" + string(ceil(instance_number(objEnemy)/14)), c_white, c_black)
    
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw items if in panel 2
if selected == 2 {
    scrDrawTextOutline(256, 128, "No items added! Put them here later", c_white, c_black)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw control menu if in panel 3
if selected == 3 {
    draw_sprite(sprCursorIcon, 0, 224, 12)
    draw_set_font(fDefault24)
    scrDrawTextOutline(224+34, 10, "Cursor control enabled", c_white, c_black)
    
    ds_list_clear(control_letters)
    
    ds_list_add(control_letters,
        scrGetKeybind(global.leftButton[0]),
        scrGetKeybind(global.rightButton[0]),
        scrGetKeybind(global.jumpButton[0]),
        scrGetKeybind(global.shootButton[0]),
        scrGetKeybind(global.restartButton[0]),
        scrGetKeybind(global.skipButton[0]),
        scrGetKeybind(global.suicideButton[0]),
        scrGetKeybind(global.pauseButton[0]),
        scrGetKeybind(global.openDoorButton[0]),
    )
    
    
    // Draw control rectangles
    for (j = 0; j &lt;= 2; j++) {
        for (i = 0; i &lt;= 3; i++) {
            if ((j*4)+i) &lt; ds_list_size(control_letters) { // Don't render keybinds outside of the list
                draw_set_font(fDefault18)
                
                draw_set_colour($7C625D) // actually 5D627C
                draw_rectangle((200*i)+248+25, (100*j)+128, (200*i)+248+175, (100*j)+128+73, false)
                draw_set_colour(c_black)
                draw_rectangle((200*i)+248+25, (100*j)+128, (200*i)+248+175, (100*j)+128+32, true)
                draw_rectangle((200*i)+248+25, (100*j)+128, (200*i)+248+175, (100*j)+128+73, true)
                var label = (j*4)+i
                scrDrawTextOutline((200*i)+248+26, (100*j)+129, control_labels[| label], c_white, c_black)
                
                draw_set_font(fDefault24)
                

                scrDrawTextOutline((200*i)+248+26, (100*j)+159, control_letters[| label], c_white, c_black)
            }
        }
    }
    if changingKeybind {
        // Draw text if we're changing keybinds
        draw_set_halign(1)
        
        scrDrawTextOutline(644, 400, "Changing keybind " + control_labels[| keybindNum] + "#Press any key", c_white, c_black)
        
        draw_set_halign(0)
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw options menu if in panel 5
if selected == 5 {
    draw_set_color(c_black);
    draw_set_font(fDefault30);
    draw_set_halign(fa_left);
    
    
    
    for(var i = 0; i &lt; optionsNum; i++)
        scrDrawTextOutline(xSelector,ySelector+(ySeperation*i),strSelect[i], c_white, c_black);
    
    draw_set_halign(fa_right);
    
    if (global.muteMusic)
        scrDrawTextOutline(xSelector+xSeperation,ySelector,"Off", c_white, c_black);
    else
        scrDrawTextOutline(xSelector+xSeperation,ySelector,"On", c_white, c_black);
    
    scrDrawTextOutline(xSelector+xSeperation,ySelector+ySeperation,string(global.volumeLevel) + "%", c_white, c_black);
        
    if (global.fullscreenMode)
        scrDrawTextOutline(xSelector+xSeperation,ySelector+(ySeperation*2),"Fullscreen", c_white, c_black);
    else
        scrDrawTextOutline(xSelector+xSeperation,ySelector+(ySeperation*2),"Windowed", c_white, c_black);
    
    if (global.smoothingMode)
        scrDrawTextOutline(xSelector+xSeperation,ySelector+(ySeperation*3),"On", c_white, c_black);
    else
        scrDrawTextOutline(xSelector+xSeperation,ySelector+(ySeperation*3),"Off", c_white, c_black);
    
    if (global.vsyncMode)
        scrDrawTextOutline(xSelector+xSeperation,ySelector+(ySeperation*4),"On", c_white, c_black);
    else
        scrDrawTextOutline(xSelector+xSeperation,ySelector+(ySeperation*4),"Off", c_white, c_black);
    
    if global.screenPosition == 0 {
        scrDrawTextOutline(xSelector+xSeperation,ySelector+(ySeperation*5),"Right", c_white, c_black);
    } else if global.screenPosition == 1 {
        scrDrawTextOutline(xSelector+xSeperation,ySelector+(ySeperation*5),"Centered", c_white, c_black);
    } else {
        scrDrawTextOutline(xSelector+xSeperation,ySelector+(ySeperation*5),"Left", c_white, c_black);
    }
        
    if inPanel {
        draw_sprite(sprHUDSelectorArrow,0,xSelector-18,ySelector+(ySeperation*selected2)+13);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw debug menu if in panel 6
if selected == 6 {
    draw_set_color(c_black);
    draw_set_font(fDefault24);
    draw_set_halign(fa_left);
    
    scrDrawTextOutline(264, 72 + (64*0), "HP", c_white, c_black)
    scrDrawTextOutline(264, 72 + (64*1), "ATK", c_white, c_black)
    scrDrawTextOutline(264, 72 + (64*2), "DEF", c_white, c_black)
    scrDrawTextOutline(264, 72 + (64*3), "Keys", c_white, c_black)
    
    scrDrawTextOutline(264, 72 + (64*4), "Reset persistent objects (current room)", c_white, c_black)
    scrDrawTextOutline(264, 72 + (64*5), "Toggle invincibility", c_white, c_black)
    scrDrawTextOutline(264, 72 + (64*6), "Toggle infinite jump", c_white, c_black)
    
    for (i = 0; i &lt;= 3; i++) {
        draw_set_colour(c_gray);
        draw_rectangle(264+100, 75 + (64*i), 224+300, 75+32 + (64*i), false)
        
        draw_set_colour(c_black);
        draw_rectangle(264+100, 75 + (64*i), 224+300, 75+32 + (64*i), true)
    }
    
    draw_set_font(fDefault18)
    draw_set_halign(1)
    switch statNum {
        case 0:
            scrDrawTextOutline(224+220, 77 + (64*0), string(global.kidHP) + "|", c_white, c_black)
            scrDrawTextOutline(224+220, 77 + (64*1), global.kidATK, c_white, c_black)
            scrDrawTextOutline(224+220, 77 + (64*2), global.kidDEF, c_white, c_black)
        break; case 1:
            scrDrawTextOutline(224+220, 77 + (64*0), global.kidHP, c_white, c_black)
            scrDrawTextOutline(224+220, 77 + (64*1), string(global.kidATK) + "|", c_white, c_black)
            scrDrawTextOutline(224+220, 77 + (64*2), global.kidDEF, c_white, c_black)
        break; case 2:
            scrDrawTextOutline(224+220, 77 + (64*0), global.kidHP, c_white, c_black)
            scrDrawTextOutline(224+220, 77 + (64*1), global.kidATK, c_white, c_black)
            scrDrawTextOutline(224+220, 77 + (64*2), string(global.kidDEF) + "|", c_white, c_black)
        break; default:
            scrDrawTextOutline(224+220, 77 + (64*0), global.kidHP, c_white, c_black)
            scrDrawTextOutline(224+220, 77 + (64*1), global.kidATK, c_white, c_black)
            scrDrawTextOutline(224+220, 77 + (64*2), global.kidDEF, c_white, c_black)
            
        break;
        
    }
    if statNum != 3 {
        scrDrawTextOutline(224+220, 77 + (64*3), global.kidKey[keyArea, keyType], c_white, c_black)
    } else {
        scrDrawTextOutline(224+220, 77 + (64*3), string(global.kidKey[keyArea, keyType]) + "|", c_white, c_black)
    }
    
    draw_set_halign(0)
    scrDrawTextOutline(224+320, 77 + (64*3), "(Area " + string(keyArea) + ", Type " + string(keyType) + ")", c_white, c_black)

    if inPanel {
        if changingStat {
            draw_sprite_ext(sprHUDSelectorArrow, 0, 224+10, 77 + (64*selected2), 1, 1, 0, c_red, 1);
        } else {
            draw_sprite(sprHUDSelectorArrow, 0, 224+10, 77 + (64*selected2));
        }
    }
    
    draw_set_font(fDefault12)   // Tutorial text
    draw_set_halign(2)
    draw_set_valign(2)
    
        scrDrawTextOutline(1080, 600,
            "Select option with UP and DOWN, then use JUMP to confirm" +
            "#Enter desired stat using the NUMBER KEYS, then use SHOOT to exit" +
            "#The arrow will be RED while changing stats"+
            "#Use the SUICIDE and RESTART keys to change area when changing keys" +
            "#Use the OPEN DOOR and SKIP keys to change type of key when changing keys"
            ,
        c_white, c_black)
    
    draw_set_valign(0)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw achievements if in panel 4
if selected == 4 {
    scrDrawTextOutline(256, 128, "No achievements added! Put them here later", c_white, c_black)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
