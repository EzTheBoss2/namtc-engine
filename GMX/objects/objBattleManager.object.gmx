<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Create the enemy that we will be fighting, if it exists

// show_debug_message("Current room is " + string(room))
maxHP = global.enemyHP;
if variable_global_exists("enemy") {
    myEnemy = instance_create(400, 550, global.enemy) // Save to variable to track stats
    
    with myEnemy {
        atk = global.enemyATK
        def = global.enemyDEF
        hp = global.enemyHP
        name = global.enemyName
    }
} else {
    show_debug_message("No enemy found!!")
    myEnemy = objSpikeTriggerDown // something random that won't be in the room
}

// Move player to known position
if instance_exists(objPlayer) {
    objPlayer.x = 128;
    objPlayer.y = 550;
if (global.grav == -1)
    scrFlipGrav();  //flip player
    
}
dead = false; // used to leave

global.noPause = true; // no cheating!
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Enemy's dead, we're leaving

global.saveRoomObject[global.oldRoom, global.enemyID] = true; // Ensure the enemy doesn't immediately respawn when you return

with instance_create(0, 0, objTransition) {
    targetRoom = global.oldRoom
    overwritepos = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if !dead {
    if instance_exists(myEnemy) { 
        draw_set_font(fDefault24)
        draw_set_halign(0)
        
        // Draw name (outlined)
        scrDrawTextOutline(16, 16, myEnemy.name, c_white, c_black)
        draw_set_colour(c_white)
        
        if maxHP &gt; 99 {
        // Draw current HP (if HP over 99)
        scrDrawTextOutline(16, 48, "HP: " + string(myEnemy.hp) + "/" + string(maxHP), c_white, c_black)
        } else {
            // show_debug_message(string(myEnemy.hp) + "/" + string(maxHP))
            if maxHP &gt; 9 {  // 10 or higher; we need to draw big hearts
                
                for (i = 0; i &lt; floor(maxHP/10); i++) {
                    if myEnemy.hp &gt;= (10*(i+1)) {
                        draw_sprite(sprBattleHeart_Large, 1, 16 + (16*i), 64)
                    } else {
                        draw_sprite(sprBattleHeart_Large, 0, 16 + (16*i), 64)
                    }
                }
                for (i = 0; i &lt;= 9; i++) {
                    if (myEnemy.hp)%10 &gt; i {
                        draw_sprite(sprBattleHeart_Small, 1, 16 + (10*i), 64+16)
                    } else {
                        draw_sprite(sprBattleHeart_Small, 0, 16 + (10*i), 64+16)
                    }
                }
            } else {
                for (i = 0; i &lt; maxHP; i++) {
                    if (myEnemy.hp) &gt; i {
                        draw_sprite(sprBattleHeart_Small, 1, 16 + (10*i), 52)
                    } else {
                        draw_sprite(sprBattleHeart_Small, 0, 16 + (10*i), 52)
                    }
                }
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
